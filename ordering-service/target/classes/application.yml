spring:
  application:
    name: ordering-service
  datasource:
    url: jdbc:h2:mem:ordering-db;MODE=PostgreSQL;DB_CLOSE_ON_EXIT=FALSE
    type: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    username: sa
    password:
    hikari:
      pool-name: orders.connection.pool
  jpa:
    hibernate:
      ddl-auto: create-drop
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
    show-sql: true
    open-in-view: false
  cloud:
    stream:
      bindings:
        order-event-outbound:
          destination: orders-topic
          contentType: 'application/json'
          producer:
            header-mode: headers
        payments-topic:
          destination: payments-topic
          consumer:
            header-mode: headers
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              commit:
                interval: 1000
server:
  port: ${ORDERING_SERVICE_PORT:8084}
---
spring:
  profiles: docker
  application:
    name: ordering-service
  datasource:
    url: jdbc:h2:mem:ordering-db;MODE=PostgreSQL;DB_CLOSE_ON_EXIT=FALSE
    type: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.h2.Driver
    username: sa
    password:
    hikari:
      pool-name: orders.connection.pool
  jpa:
    hibernate:
      ddl-auto: create-drop
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
    show-sql: true
    open-in-view: false
  cloud:
    stream:
      bindings:
        order-event-outbound:
          destination: orders-topic
          contentType: 'application/json'
          producer:
            header-mode: headers
        payments-topic:
          destination: payments-topic
          consumer:
            header-mode: headers
      kafka:
        binder:
          brokers: kafka:9092
        streams:
          binder:
            configuration:
              commit:
                interval: 1000
server:
  port: ${ORDERING_SERVICE_PORT:8084}